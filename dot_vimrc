set nocompatible
filetype plugin on
syntax on
set autoread
set encoding=UTF-8

call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

Plug 'tpope/vim-sensible'

" Themes
Plug 'pineapplegiant/spaceduck', { 'branch' : 'main' }
Plug 'vim-airline/vim-airline-themes'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'rebelot/kanagawa.nvim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'maxmx03/fluoromachine.nvim'

Plug 'junegunn/seoul256.vim'
Plug 'vim-airline/vim-airline'
Plug 'sheerun/vim-polyglot'
Plug 'preservim/nerdcommenter'
Plug '907th/vim-auto-save'
Plug 'Raimondi/delimitMate'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Zettelkasten
Plug 'vimwiki/vimwiki'
Plug 'michal-h21/vim-zettel'

" Tree
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tribela/vim-transparent'
Plug 'reedes/vim-pencil', {'for': ['markdown', 'rmarkdown', 'text', 'rmd']}
Plug 'reedes/vim-lexical', {'for': ['markdown', 'rmarkdown', 'text', 'rmd']}
Plug 'junegunn/goyo.vim', {'for': ['markdown', 'rmarkdown', 'text', 'rmd']}
Plug 'junegunn/limelight.vim', {'for': ['markdown', 'rmarkdown', 'text', 'rmd']}

"  COC
"  Core
Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'bun i'}

"  Plugins
Plug 'neoclide/coc-tsserver', {'do': 'bun i'}
Plug 'neoclide/coc-json', {'do': 'bun i'}
Plug 'neoclide/coc-css', {'do': 'bun i'}
Plug 'neoclide/coc-html', {'do': 'bun i'}
Plug 'neoclide/coc-eslint', {'do': 'bun i'}
Plug 'neoclide/coc-prettier', {'do': 'bun i'}
Plug 'neoclide/coc-yaml', {'do': 'bun i'}
Plug 'neoclide/coc-vetur', {'do': 'bun i'}
Plug 'fannheyward/coc-biome', {'do': 'bun i'}
Plug 'jeffkreeftmeijer/vim-numbertoggle'

call plug#end()

set background=dark

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Neovide config
if exists("g:neovide")
  if has("macunix")
    set guifont=Agave\ Nerd\ Font\ Mono:h16
  endif
  if has("unix")
    set guifont=Agave\ Nerd\ Font\ Mono:h10
  endif

  set linespace=6
  let g:neovide_floating_blur_amount_x = 2.0
  let g:neovide_floating_blur_amount_y = 2.0
  let g:neovide_transparency = 0.8
  let g:neovide_cursor_vfx_mode = "pixiedust"
endif

" set colours
colorscheme kanagawa
let g:airline_theme = 'dracula'

"  coc stuff
" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

let g:vim_json_syntax_conceal = 1

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"
" remap for complete to use tab and <cr>
inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#pum#next(1):
    \ <SID>check_back_space() ? "\<Tab>" :
    \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()


" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

set colorcolumn=80
set number

let g:auto_save=1
let g:auto_save_silent=1
" set cursorline
" set cursorcolumn
set linebreak
set tabstop=2
set expandtab
set shiftwidth=2
set wrapscan
let NERDSpaceDelims=1
noremap <silent> <c-_> :let @/ = ""<CR>
set virtualedit=all
set so=999

" fix tsx
augroup tsx
	au!
	au BufRead,BufNewFile *.tsx set suffixesadd+=.tsx
	au BufRead,BufNewFile *.tsx set filetype=typescript.tsx
augroup END

" Prettier command formats document
command! -nargs=0 Prettier :CocCommand prettier.forceFormatDocument

" Custom icons for nerd tree git integration
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ 'Modified'  :'✹',
    \ 'Staged'    :'✚',
    \ 'Untracked' :'✭',
    \ 'Renamed'   :'➜',
    \ 'Unmerged'  :'═',
    \ 'Deleted'   :'✖',
    \ 'Dirty'     :'✗',
    \ 'Ignored'   :'☒',
    \ 'Clean'     :'✔︎',
    \ 'Unknown'   :'?',
    \ }

" NERD Tree keymaps
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" <leader>cd changes current working dir to currently edited file
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

" Open the existing NERDTree on each new tab.
autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif

" enable TypeScript/TSX in dot-astro files
let g:astro_typescript = 'enable'

" Setup Zettelkasten dirs
let g:vimwiki_list = [
      \ { 'path': 'Q:/working/f/TheWritingRoom', 'syntax': 'markdown',
      \ 'ext': '.md'}
      \]

" Only files in Zettelkasten dirs are Zettelkastens
let g:vimwiki_global_ext = 0

augroup i_like_spellchk
  autocmd!
  autocmd FileType markdown,rmarkdown,rmd,text set spell
augroup END

" Keep cursor in approximately the middle of the screen
set scrolloff=999

" Search in the Zettlekastens
let g:nv_search_paths = ['Q:/working/f/TheWritingRoom']

" New Zettles are filenamed like 202011141509 (extension defined in
" g:vimwiki_list above)
let g:zettel_format = "%Y%m%d%H%M %title"

" use [[ ]] style links for Zettlekasten
let g:zettel_link_format="[[%link]]"

" Add spellfile to dictionary source for coc-word
set dictionary+=~/en.utf-8.add

"  done :)
echo "hello kayak!"
